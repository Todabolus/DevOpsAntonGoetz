name: CleverCash Backend CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Docker-Image Version (SHA oder Tag)"
        required: true
        type: string
        default: "latest"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Setze VERSION aus Input
        run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Login bei Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Erstelle Docker-Network
        run: docker network create spring-cloud-network

      - name: Starte PostgreSQL-Container
        run: |
          docker run -d --name postgres --network spring-cloud-network \
            -e POSTGRES_DB=CleverCashDB \
            -e POSTGRES_USER=admin \
            -e POSTGRES_PASSWORD=admin \
            postgres:15.3

      - name: Starte Backend-Container
        run: |
          docker run -d --name backend-container --network spring-cloud-network -p 8080:8080 \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/CleverCashDB \
            -e SPRING_DATASOURCE_USERNAME=admin \
            -e SPRING_DATASOURCE_PASSWORD=admin \
            ${{ secrets.DOCKER_USERNAME }}/devops-github-backend:${{ env.VERSION }}

      - name: Warte auf erreichbaren Backend-Port
        run: |
          for i in {1..30}; do
            if nc -z localhost 8080; then
              echo "‚úÖ Port 8080 erreichbar"
              exit 0
            else
              echo "‚è≥ Warte auf Port 8080‚Ä¶ ($i/30)"
              sleep 2
            fi
          done
          echo "‚ùå Port 8080 nicht erreichbar ‚Äì Logs:"
          docker logs backend-container || true
          docker logs postgres || true
          exit 1

      - name: Kurze Pause zum Starten der Anwendung
        run: sleep 30

      - name: Pr√ºfe Swagger-UI auf HTML-Response
        run: |
          echo "üåê Pr√ºfe Swagger-UI-Inhalt"
          RESPONSE=$(curl -sL http://localhost:8080/swagger-ui/index.html)   # ‚ë† -L folgt Redirect
          if echo "$RESPONSE" | grep -q "<html"; then
            echo "‚úÖ Swagger-UI liefert HTML"
          else
            echo "‚ùå Kein HTML im Response"
            exit 1
          fi

